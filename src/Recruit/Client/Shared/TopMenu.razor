@using Blazored.LocalStorage
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ProfileState ProfileState
@implements IDisposable

<div class="top-menu">
    <AuthorizeView>
        <div class="left-side">
            <SearchForm />
        </div>
        <div class="right-side auth">
            <div>
                <ul class="nav align-items-center">
                    <li class="nav-item">
                        <div class="dropdown">
                            <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bell"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path><path d="M13.73 21a2 2 0 0 1-3.46 0"></path></svg>
                            </a>
                            <ul class="dropdown-menu">
                                <li><h6 class="dropdown-header">Notifications</h6></li>
                                <div class="notifications-wrapper">
                                    <span class="text-muted fs-14">TODO: notifications goes here</span>
                                </div>
                            </ul>
                        </div>
                    </li>
                    <li class="nav-item">
                        <div class="dropdown">
                            <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <div class="d-flex align-items-center">
                                    @if (!string.IsNullOrEmpty(ProfileState.UserAvatar))
                                    {
                                        <img class="avatar avatar-green me-1" src="@ProfileState.UserAvatar" />
                                    }
                                    else
                                    {
                                        <span class="avatar avatar-green me-1">@context.User?.FindFirst("full_name")?.Value.ToUpper()[0]</span>
                                    }
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                </div>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end profile-dropdown mt-1">
                                <div class="d-flex justify-content-between align-items-center profile-header">
                                    @if (!string.IsNullOrEmpty(ProfileState.UserAvatar))
                                    {
                                        <img class="avatar avatar-green avatar-lg me-2" src="@ProfileState.UserAvatar" />
                                    }
                                    else
                                    {
                                        <span class="avatar avatar-green avatar-lg me-2">@context.User?.FindFirst("full_name")?.Value.ToUpper()[0]</span>
                                    }
                                    <div class="d-flex flex-column flex-grow-1 justify-content-center user-info">
                                        <span class="fw-500 name">@context.User?.FindFirst("full_name")?.Value</span>
                                        <span class="text-muted email">@context.User?.FindFirst("email")?.Value</span>
                                    </div>
                                </div>
                                <a class="dropdown-item" href="/Settings">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-settings"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
                                    Settings
                                </a>
                                <button class="dropdown-item mb-2" @onclick="BeginSignOut">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-log-out"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>
                                    Logout
                                </button>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </AuthorizeView>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        ProfileState.OnChange += StateHasChanged;

        // Get avatar from local storage
        var avatar = await LocalStorage.GetItemAsync<string>("avatar");
        ProfileState.SetAvatar(avatar);
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        ProfileState.OnChange -= StateHasChanged;
    }
}
