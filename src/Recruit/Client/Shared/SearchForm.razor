@inject HttpClient Http

<div class="search-result-container">
    <input type="text" class="search-input" placeholder="Search..." @oninput="Search" @onfocusin="ShowResults" />
    <div class="svg-container">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
    </div>
    <div class="@SearchResultCssClass">
        <div class="search-result-content">
            @if (result == null)
            {
                <p><em>No results found!</em></p>
            }
            else
            {
                @if (result.Applicants.Any())
                {
                    <h6>Applicants</h6>
                    <ul class="list-unstyled mb-3">
                        @foreach (var applicant in result.Applicants)
                        {
                            <li class="mt-2">
                                <a href="#" class="d-flex align-items-center">
                                    @if (!string.IsNullOrEmpty(applicant.ProfilePhoto))
                                    {
                                        <img src="@applicant.ProfilePhoto" class="avatar me-2" />
                                    }
                                    else
                                    {
                                        <span class="avatar avatar-green me-2">@applicant.FirstName?.ToUpper()[0]</span>
                                    }
                                    <span>@applicant.FirstName @applicant.LastName</span>
                                    <span style="color: gray; margin-left:5px;">applied for @applicant.Job?.Title</span>
                                </a>
                            </li>
                        }

                    </ul>
                }

                @if (result.Jobs.Any())
                {
                    <h6>Jobs</h6>
                    <ul class="list-unstyled mb-3">

                        @foreach (var job in result.Jobs)
                        {
                            <li class="mt-2">
                                <NavLink href="@($"Jobs/{job.Id}")" class="d-flex align-items-center">
                                    <span class="avatar avatar-rounded avatar-project me-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-briefcase"><rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path></svg>
                                    </span>
                                    <span>@job.Title</span>
                                    <span style="color: gray; margin-left:5px;"> in @job.City, @job.Country</span>
                                </NavLink>
                            </li>
                        }

                    </ul>
                }
            }
        </div>
    </div>
</div>

@if (showSearchResult)
{
    <div class="outside-clickable-container" @onclick="HideResults">
    </div>
}

@code {
    private bool showSearchResult = false;

    private string? SearchResultCssClass => showSearchResult ? "search-result show" : "search-result";

    private void ShowResults()
    {
        showSearchResult = true;
        StateHasChanged();
    }

    private void HideResults()
    {
        showSearchResult = false;
        StateHasChanged();
    }

    private SearchResult? result;

    public async Task Search(ChangeEventArgs args)
    {
        result = null;
        if (!string.IsNullOrEmpty(args.Value?.ToString()))
            result = await Http.GetFromJsonAsync<SearchResult?>($"api/Search?searchTerm={args.Value.ToString()}");
    }
}