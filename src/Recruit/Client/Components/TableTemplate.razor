@typeparam TItem

<div class="@ResponsiveCss @ShowTableBorderCss">
    <table class="table @IsSmallCss">
        <thead>
            <tr>@TableHeader</tr>
        </thead>
        <tbody>
            @if (Items?.Count == 0)
            {
                <tr>@NoDataTemplate</tr>
            }

            @if (Virtualize)
            {
                <Virtualize Items="Items" Context="item">
                    <tr>@RowTemplate!(item)</tr>
                </Virtualize>
            }
            else
            {
                foreach (var item in Items ?? Enumerable.Empty<TItem>())
                {
                    <tr>@RowTemplate!(item)</tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public RenderFragment? TableHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter]
    public RenderFragment? NoDataTemplate { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; } = new();

    [Parameter]
    public bool Virtualize { get; set; }

    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public bool ShowTableBorder { get; set; }

    private string? IsSmallCss => IsSmall ? "table-sm" : "";

    private string? ShowTableBorderCss => ShowTableBorder ? "table-wrapper" : "";

    private string? ResponsiveCss = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Important: The Virtualize component has problem with detecting height when table-responsive is used.
            // So, we must add the table-responsive css after the Virtualize is initialized.
            Task.Run(async () =>
            {
                await Task.Delay(50);
                ResponsiveCss = "table-responsive";
                StateHasChanged();
            });
        }
    }
}
