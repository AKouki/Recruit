@inject HttpClient Http

<div class="dashboard-item upcoming-interviews">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h6>Interviews</h6>
        <div class="d-flex justify-content-between">
            <a class="@TodayCssClass" @onclick="@(() => ShowTodayOnly = true)">Today</a>
            <a class="@UpcomingCssClass" @onclick="@(() => ShowTodayOnly = false)">Upcoming</a>
        </div>
    </div>

    @if (!HasLoaded)
    {
        <Spinner IsCenter="true" />
    }
    else
    {
        if (FilteredInterviews != null)
        {
            <TableTemplate Items="FilteredInterviews" Context="interview" IsSmall="true">
                <TableHeader>
                    <th scope="col">Applicant</th>
                    <th scope="col">Position</th>
                    <th scope="col">Date</th>
                    <th scope="col">Interviewer</th>
                </TableHeader>
                <NoDataTemplate>
                    <td colspan="4" class="text-dark">No scheduled interviews</td>
                </NoDataTemplate>
                <RowTemplate>
                    <td>
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(interview.Applicant?.ProfilePhoto))
                            {
                                <img src="@interview.Applicant?.ProfilePhoto" class="avatar me-2" />
                            }
                            else
                            {
                                <span class="avatar avatar-green me-2">@interview.Applicant?.FirstName?.ToUpper()[0]</span>
                            }
                            <a @onclick:stopPropagation="true" @onclick="@(() => OnSelectApplicant.InvokeAsync(interview.Applicant))" class="name fw-500">
                                @interview.Applicant?.FirstName @interview.Applicant?.LastName
                            </a>
                        </div>
                    </td>
                    <td>
                        <NavLink href="@($"Jobs/{interview.Applicant?.Job?.Id}")">
                            @interview.Applicant?.Job?.Title
                        </NavLink>
                    </td>
                    <td>@interview.ScheduledAt.ToString("dd/MM/yyyy")</td>
                    <td>@interview.Interviewer</td>
                </RowTemplate>
            </TableTemplate>
        }
    }
</div>

@code {
    public bool ShowTodayOnly = true;
    public bool HasLoaded;

    public string? TodayCssClass => ShowTodayOnly == true ? "btn btn-primary btn-sm me-1" : "btn btn-light btn-sm me-1";
    public string? UpcomingCssClass => ShowTodayOnly == false ? "btn btn-primary btn-sm" : "btn btn-light btn-sm";

    public List<Interview>? Interviews { get; set; }
    public List<Interview>? FilteredInterviews => ShowTodayOnly ?
        Interviews?.Where(i => i.ScheduledAt.Date == DateTime.Now.Date).ToList() : Interviews;

    [Parameter]
    public EventCallback<Applicant?> OnSelectApplicant { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interviews = await Http.GetFromJsonAsync<List<Interview>>("api/Interviews");
        HasLoaded = true;
    }

}
