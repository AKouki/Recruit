@inject HttpClient Http

<div class="dashboard-item recent-applicants" @onclick="@(() => ShowDetails(null))">
    <div class="d-flex justify-content-between align-items-center">
        <h6>Recent Applicants</h6>
        <select id="jobType" class="form-select form-select-sm" value="@SelectedJobId" @onchange="UpdateList" style="width:150px">
            <option value="0" selected>All</option>
            @foreach (var item in Jobs ?? Enumerable.Empty<Job>())
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>
    @if (!HasLoaded)
    {
        <Spinner IsCenter="true" />
    }
    else
    {
        <ul class="list-unstyled mt-3">
            @if (FilteredApplicants == null || FilteredApplicants.Count == 0)
            {
                <li class="fs-14">No recent applicants</li>
            }
            else
            {
                @foreach (var item in FilteredApplicants ?? Enumerable.Empty<Applicant>())
                {
                    <li class="pb-3">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(item.ProfilePhoto))
                            {
                                <img src="@item.ProfilePhoto" class="avatar me-2" />
                            }
                            else
                            {
                                <span class="avatar avatar-green me-2">@item.FirstName?.ToUpper()[0]</span>
                            }
                            <div class="d-flex flex-column">
                                <a @onclick:stopPropagation="true" @onclick="@(() => ShowDetails(item.Id))" class="cursor-pointer fs-14 fw-500">
                                    @item.FirstName @item.LastName
                                </a>
                                <span class="fs-14 text-secondary">applied for <span class="fw-400 text-secondary">@item.Job?.Title</span></span>
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    }
</div>

@code {
    public bool HasLoaded;

    public List<Applicant>? Applicants { get; set; }
    public List<Applicant>? FilteredApplicants { get; set; }
    public List<Job>? Jobs { get; set; }

    public int SelectedJobId { get; set; } = 0;

    [Parameter]
    public EventCallback<int?> OnSelectApplicant { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Applicants = await Http.GetFromJsonAsync<List<Applicant>>("api/Applicants");
        FilteredApplicants = Applicants?.OrderByDescending(a => a.ApplyDate).Take(10).ToList();
        Jobs = Applicants?.Select(s => s.Job!).GroupBy(s => s.Id).Select(s => s.First()).ToList();
        HasLoaded = true;
    }

    private void UpdateList(ChangeEventArgs args)
    {
        if (int.TryParse(args?.Value?.ToString(), out int result))
        {
            SelectedJobId = result;

            if (SelectedJobId != 0)
            {
                FilteredApplicants = Applicants?
                    .Where(a => a.Job?.Id == SelectedJobId)
                    .OrderByDescending(a => a.ApplyDate)
                    .Take(10)
                    .ToList();
            }
            else
            {
                FilteredApplicants = Applicants?.OrderByDescending(a => a.ApplyDate).Take(10).ToList();
            }
        }
    }

    private async Task ShowDetails(int? id)
    {
        await OnSelectApplicant.InvokeAsync(id);
    }

}
