@page "/Interviews"
@using Recruit.Client.Pages.InterviewPages
@inject HttpClient Http
@attribute [Authorize]

<div class="d-flex justify-content-between align-items-center mb-1">
    <h3>Interviews</h3>
    <a class="btn btn-primary btn-sm" @onclick="() => OpenScheduleDialog(null)">Schedule</a>
</div>

<div class="d-flex align-items-center filters mb-3">
    <select class="form-select form-select-sm @(filterDateValue > 0 ? "highlight" : "")" value="@filterDateValue" @onchange="FilterByDate" @onchange:stopPropagation="true">
        <option value="0" selected>Date</option>
        <option value="1">Today</option>
        <option value="2">Upcoming</option>
    </select>
    <select class="form-select form-select-sm @(filterJobIdValue > 0 ? "highlight" : "")" value="@filterJobIdValue" @onchange="FitlerByPosition" @onchange:stopPropagation="true">
        <option value="0" selected>Position</option>
        @foreach (var item in Positions ?? Enumerable.Empty<Job>())
        {
            <option value="@item?.Id">@item?.Title</option>
        }
    </select>
</div>

@if (interviews == null)
{
    <p>Loading...</p>
}
else
{
    <TableTemplate Items="filteredInterviews" Context="interview" IsSmall="true" ShowTableBorder="true">
        <TableHeader>
            <th scope="col">Applicant</th>
            <th scope="col">Position</th>
            <th scope="col">Date</th>
            <th scope="col">Duration</th>
            <th scope="col">Interviewer</th>
            <th scope="col">Actions</th>
        </TableHeader>
        <NoDataTemplate>
            <td colspan="6">No data available</td>
        </NoDataTemplate>
        <RowTemplate>
            <td>
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(interview.Applicant?.ProfilePhoto))
                    {
                    <img src="@interview.Applicant.ProfilePhoto" class="avatar me-2" />
                    }
                    else
                    {
                    <span class="avatar avatar-green me-2">@interview.Applicant?.FirstName?.ToUpper()[0]</span>
                    }
                <div class="d-flex flex-column">
                    <a @onclick:stopPropagation="true" @onclick="@(() => ShowDetails(interview.Applicant?.Id))" class="name fw-500">
                        @interview.Applicant?.FirstName @interview.Applicant?.LastName
                    </a>
                    <span>@interview.Applicant?.Headline</span>
                </div>
            </div>
        </td>
        <td>
            <NavLink class="fw-500" href="@($"Jobs/{interview.Applicant?.Job?.Id}")">
                @interview.Applicant?.Job?.Title
            </NavLink>
        </td>
        <td>@interview.ScheduledAt.ToString("dd/MM/yyyy hh:mm tt")</td>
        <td>@interview.Duration minutes</td>
        <td>@interview.Interviewer</td>
        <td>
            <a class="btn btn-outline-primary btn-sm" @onclick="() => OpenScheduleDialog(interview)">
                Reschedule
            </a>
            <a class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteDialog(interview))">Cancel</a>
        </td>
    </RowTemplate>
</TableTemplate>
}

<ModalTemplate @bind-IsVisible="ShowScheduleDialog" Title="Schedule interview">
    <Schedule Interview="selectedInterview"
              OnCancel="HandleCancel"
              OnValidSubmit="HandleSchedule" />
</ModalTemplate>

<ApplicantDetails ApplicantId="CurrentApplicantId"
                  OnClose="HideDetails" />

<ConfirmDialog Title="Cancel Interview"
               Text="Are you sure you want to cancel this interview?"
               OnClose="OnDeleteDialogClose"
               @bind-IsVisible="ShowDeleteDialog" />

@code {
    private List<Interview>? interviews;
    private List<Interview>? filteredInterviews;
    private Interview? selectedInterview { get; set; }
    private List<Job>? Positions => interviews?.Select(i => i.Applicant?.Job!).DistinctBy(j => j.Id).ToList();

    private int filterDateValue = 0;
    private int filterJobIdValue = 0;

    private int? CurrentApplicantId { get; set; }

    private bool ShowScheduleDialog = false;
    private bool ShowDeleteDialog = false;

    protected override async Task OnInitializedAsync()
    {
        interviews = await Http.GetFromJsonAsync<List<Interview>>("api/Interviews");
        filteredInterviews = interviews;
    }

    public void ShowDetails(int? id)
    {
        CurrentApplicantId = id;
    }

    public void HideDetails()
    {
        CurrentApplicantId = null;
        selectedInterview = null;
    }

    private void OpenDeleteDialog(Interview interview)
    {
        ShowDeleteDialog = true;
        selectedInterview = interview;
    }

    private async Task OnDeleteDialogClose(bool confirmed)
    {
        if (confirmed && selectedInterview != null)
        {
            var response = await Http.DeleteAsync($"api/Interviews/{selectedInterview.Id}");
            if (response.IsSuccessStatusCode)
            {
                interviews?.Remove(selectedInterview);
            }
        }

        ApplyFilters();
        ShowDeleteDialog = false;
    }

    private void OpenScheduleDialog(Interview? interview)
    {
        selectedInterview = interview;
        ShowScheduleDialog = true;
    }

    private void HandleSchedule(Interview interview)
    {
        if (selectedInterview == null)
            interviews?.Add(interview);
        else
            interviews.Replace(selectedInterview, interview);

        // Reorder
        interviews = interviews?.OrderBy(i => i.ScheduledAt).ToList();

        ApplyFilters();

        selectedInterview = null;
        ShowScheduleDialog = false;
    }

    private void HandleCancel()
    {
        selectedInterview = null;
        ShowScheduleDialog = false;
    }

    private void FilterByDate(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int dateValue))
        {
            filterDateValue = dateValue;
            ApplyFilters();
        }
    }

    private void FitlerByPosition(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int jobId))
        {
            filterJobIdValue = jobId;
            ApplyFilters();
        }
    }
    private void ApplyFilters()
    {
        // Reset position filter if theres no position in list after the changes
        if (!Positions!.Any(j => j.Id == filterJobIdValue))
            filterJobIdValue = 0;

        filteredInterviews = filterDateValue == 1 ?
            interviews?.Where(i => i.ScheduledAt.Date == DateTime.Now.Date).ToList() : interviews;

        filteredInterviews = filterJobIdValue > 0 ?
            filteredInterviews?.Where(i => i.Applicant?.Job?.Id == filterJobIdValue).ToList() : filteredInterviews;
    }
}