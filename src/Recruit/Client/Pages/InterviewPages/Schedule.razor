@page "/Interviews/Schedule"
@page "/Interviews/Schedule/{id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3 class="max-width-960 mx-auto">Schedule Interview</h3>

@if (IsLoading)
{
    <span class="d-block max-width-960 mx-auto">Loading...</span>
}
else
{
    @if (Applicants == null || Applicants.Count == 0)
    {
        <span class="d-block max-width-960 mx-auto">There are no applicants or there is already an interview for them.</span>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit" class="row g-3 mb-3 max-width-960 mx-auto">
            <DataAnnotationsValidator />
            <div class="col-12">
                <ValidationSummary />
                <span class="validation-message">@StatusMessage</span>
            </div>
            <div class="col-12">
                <div class="dropdown">
                    <a class=" dropdown-toggle form-control @(IsDisabledCss)" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(CurrentApplicant?.ProfilePhoto))
                            {
                                <img src="@CurrentApplicant?.ProfilePhoto" class="avatar me-2" />
                            }
                            else
                            {
                                <span class="avatar avatar-green me-2">@CurrentApplicant?.FirstName?.ToUpper()[0]</span>
                            }
                            <div class="d-flex flex-column">
                                <span class="fs-14 fw-500">@CurrentApplicant?.FirstName @CurrentApplicant?.LastName</span>
                                <span class="fs-14 text-secondary">applied for @CurrentApplicant?.Job?.Title</span>
                            </div>
                        </div>
                    </a>

                    <ul class="dropdown-menu form-control" aria-labelledby="dropdownMenuLink">
                        @foreach (var item in Applicants ?? Enumerable.Empty<Applicant>())
                        {
                            <li>
                                <a class="dropdown-item cursor-pointer" @onclick="@(() => CurrentApplicant = item)">
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(item?.ProfilePhoto))
                                        {
                                            <img src="@item?.ProfilePhoto" class="avatar me-2" />
                                        }
                                        else
                                        {
                                            <span class="avatar avatar-green me-2">@item?.FirstName?.ToUpper()[0]</span>
                                        }
                                        <div class="d-flex flex-column">
                                            <span class="fs-14 fw-500">@item?.FirstName @item?.LastName</span>
                                            <span class="fs-14 text-secondary">applied for @item?.Job?.Title</span>
                                        </div>
                                    </div>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-12">
                <label for="date" class="form-label">Date</label>
                <InputDate id="date" @bind-Value="model.Date" class="form-control" />
            </div>
            <div class="col-6">
                <label for="date" class="form-label">Time</label>
                <InputSelect class="form-select" @bind-Value="model.Time">
                    @foreach (var slot in GetTimeSlots())
                    {
                        <option value="@slot">@slot.ToString("hh:mm tt")</option>
                    }
                </InputSelect>
            </div>
            <div class="col-6">
                <label for="date" class="form-label">Duration</label>
                <InputSelect class="form-select" @bind-Value="model.Duration">
                    <option value="15">15 minutes</option>
                    <option value="20">20 minutes</option>
                    <option value="30">30 minutes</option>
                    <option value="45">45 minutes</option>
                    <option value="60">60 minutes</option>
                </InputSelect>
            </div>

            <div class="col-12">
                <button type="button" class="btn btn-light" @onclick="@(() => BackToList())">Cancel</button>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private ScheduleInterviewModel model = new ScheduleInterviewModel();

    private List<Applicant>? Applicants { get; set; }

    private Applicant? CurrentApplicant { get; set; }

    private bool IsLoading = true;

    private string? StatusMessage { get; set; }
    private string? IsDisabledCss => string.IsNullOrEmpty(Id) ? "": "disabled";

    protected override async Task OnInitializedAsync()
    {
        Applicants = await Http.GetFromJsonAsync<List<Applicant>>("api/Applicants");

        if (int.TryParse(Id, out int result))
        {
            CurrentApplicant = Applicants?.FirstOrDefault(a => a.Interview?.Id == result);
        }
        else
        {
            // Show only unscheduled applicants
            Applicants = Applicants?.Where(a => a.Interview == null).ToList();
            CurrentApplicant = Applicants?.FirstOrDefault();
        }

        model.Date = CurrentApplicant?.Interview?.ScheduledAt ?? DateTime.Now;

        if (string.IsNullOrEmpty(Id))
        {
            // Find the closest time slot for today
            model.Time = GetTimeSlots().FirstOrDefault(t => t > DateTime.Now);
        }
        else
        {
            model.Time = DateTime.Today.Add(model.Date.TimeOfDay);
            model.Duration = CurrentApplicant?.Interview?.Duration ?? 30;
        }

        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (CurrentApplicant != null)
        {
            model.ApplicantId = CurrentApplicant.Id;

            var response = string.IsNullOrEmpty(Id) ?
                    await Http.PostAsJsonAsync<ScheduleInterviewModel>("api/Interviews", model) :
                    await Http.PutAsJsonAsync<ScheduleInterviewModel>($"api/Interviews/{Id}", model);

            if (response.IsSuccessStatusCode)
            {
                BackToList();
            }
            else
            {
                StatusMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/Interviews");
    }

    private List<DateTime> GetTimeSlots()
    {
        DateTime today = DateTime.Today;
        DateTime start = new DateTime(today.Year, today.Month, today.Day, 9, 0, 0);
        DateTime end = new DateTime(today.Year, today.Month, today.Day, 18, 0, 0);

        var result = new List<DateTime>();

        while (start <= end)
        {
            result.Add(start);
            start = start.AddMinutes(30);
        }

        return result;
    }
}
