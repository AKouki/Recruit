@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize]

<EditForm Model="@model" OnValidSubmit="@HandleSubmit" class="row g-3">
    <DataAnnotationsValidator />
    <div class="col-12">
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show fs-14" role="alert">
                @StatusMessage
                <button type="button" class="btn-close" @onclick="() => StatusMessage = null"></button>
            </div>
        }
    </div>
    <div class="col-12 mt-0">
        <label class="form-label">Applicant</label>
        <div class="dropdown">
            <button class="dropdown-toggle form-control text-start @CanSelectApplicantCss" data-bs-toggle="dropdown" aria-expanded="false">
                @if (IsLoading)
                {
                    <span>Loading...</span>
                }
                else
                {
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(SelectedApplicant?.ProfilePhoto))
                        {
                            <img src="@SelectedApplicant?.ProfilePhoto" class="avatar me-2" />
                        }
                        else
                        {
                            <span class="avatar avatar-green me-2">@SelectedApplicant?.FirstName?.ToUpper()[0]</span>
                        }
                        <div class="d-flex flex-column align-items-start">
                            <span class="fs-14 fw-500">@SelectedApplicant?.FirstName @SelectedApplicant?.LastName</span>
                            <span class="fs-14 text-secondary">applied for @SelectedApplicant?.Job?.Title</span>
                        </div>
                    </div>
                }
            </button>

            <ul class="dropdown-menu form-control">
                @foreach (var item in Applicants ?? Enumerable.Empty<Applicant>())
                {
                    <li>
                        <a class="dropdown-item cursor-pointer" @onclick="@(() => SelectedApplicant = item)">
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(item?.ProfilePhoto))
                                {
                                    <img src="@item?.ProfilePhoto" class="avatar me-2" />
                                }
                                else
                                {
                                    <span class="avatar avatar-green me-2">@item?.FirstName?.ToUpper()[0]</span>
                                }
                                <div class="d-flex flex-column">
                                    <span class="fs-14 fw-500">@item?.FirstName @item?.LastName</span>
                                    <span class="fs-14 text-secondary">applied for @item?.Job?.Title</span>
                                </div>
                            </div>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="col-12">
        <label for="date" class="form-label">Date</label>
        <InputDate id="date" @bind-Value="model.Date" class="form-control" />
    </div>
    <div class="col-6">
        <label for="date" class="form-label">Time</label>
        <InputSelect class="form-select" @bind-Value="model.Time">
            @foreach (var slot in GetTimeSlots())
            {
                <option value="@slot">@slot.ToString("hh:mm tt")</option>
            }
        </InputSelect>
    </div>
    <div class="col-6">
        <label for="date" class="form-label">Duration</label>
        <InputSelect class="form-select" @bind-Value="model.Duration">
            <option value="15">15 minutes</option>
            <option value="20">20 minutes</option>
            <option value="30">30 minutes</option>
            <option value="45">45 minutes</option>
            <option value="60">60 minutes</option>
        </InputSelect>
    </div>
    <div class="col-12 footer mb-1">
        <button type="button" class="btn btn-light btn-sm" data-bs-dismiss="modal" @onclick="OnCancel">Cancel</button>
        <button type="submit" class="btn btn-primary btn-sm" disabled="@IsDisabled">Submit</button>
    </div>
</EditForm>

@code {
    private ScheduleInterviewViewModel model = new();
    private List<Applicant>? Applicants { get; set; }
    private Applicant? SelectedApplicant { get; set; }

    [Parameter]
    public Interview? Interview { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<Interview> OnValidSubmit { get; set; }

    private bool IsLoading = true;
    private bool IsDisabled = true;
    private string? StatusMessage { get; set; }
    private string? CanSelectApplicantCss => Interview == null ? "" : "disabled";

    protected override async Task OnInitializedAsync()
    {
        if (Interview == null)
        {
            Applicants = await Http.GetFromJsonAsync<List<Applicant>>("api/Applicants");
            Applicants = Applicants?.Where(a => a.Interview == null).ToList();
            SelectedApplicant = Applicants?.FirstOrDefault();
            model = new()
                {
                    Date = DateTime.Now,
                    Time = GetClosestTimeSlot(),
                    Duration = 30
                };
        }
        else
        {
            SelectedApplicant = Interview.Applicant;
            model = new()
                {
                    Date = Interview.ScheduledAt,
                    Time = DateTime.Today.Add(Interview.ScheduledAt.TimeOfDay),
                    Duration = Interview.Duration
                };
        }

        IsLoading = false;
        IsDisabled = false;
    }

    private async Task HandleSubmit()
    {
        StatusMessage = null;
        IsDisabled = true;

        if (SelectedApplicant != null)
        {
            model.ApplicantId = SelectedApplicant.Id;

            var response = Interview == null ?
                    await Http.PostAsJsonAsync<ScheduleInterviewViewModel>("api/Interviews", model) :
                    await Http.PutAsJsonAsync<ScheduleInterviewViewModel>($"api/Interviews/{Interview.Id}", model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Interview>();
                if (result != null)
                    await OnValidSubmit.InvokeAsync(result);
            }
            else
            {
                StatusMessage = await response.Content.ReadAsStringAsync();
            }
        }

        IsDisabled = false;
    }

    private DateTime GetClosestTimeSlot()
    {
        var timeSlots = GetTimeSlots();
        var closestTimeSlot = timeSlots.FirstOrDefault(t => t > DateTime.Now, timeSlots[0]);
        return closestTimeSlot;
    }

    private List<DateTime> GetTimeSlots()
    {
        DateTime today = DateTime.Today;
        DateTime start = new DateTime(today.Year, today.Month, today.Day, 0, 0, 0);
        DateTime end = new DateTime(today.Year, today.Month, today.Day, 23, 30, 0);

        var result = new List<DateTime>();

        while (start <= end)
        {
            result.Add(start);
            start = start.AddMinutes(30);
        }

        return result;
    }
}
