@page "/Admin/Departments"
@inject HttpClient Http
@attribute [Authorize]

<h3>Admin</h3>

<AdminNavMenu />

<div class="max-width-960">
    @if (departments == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center">
            <div class="search-container">
                <input type="search" @bind-value="searchTerm" @bind-value:event="oninput" class="form-control form-control-sm search" placeholder="Search..." />
                <div class="svg-container text-muted">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                </div>
            </div>
            <a class="btn btn-primary btn-sm" @onclick="() => OpenCreateDialog()">Create</a>
        </div>

        <ul class="list-unstyled custom-list mt-2">
            @foreach (var department in GetFilteredDepartments() ?? Enumerable.Empty<Department>())
            {
                <li @onclick="(() => OpenEditDialog(department))" @onclick:stopPropagation>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>
                            @department.Name
                        </span>
                        <div class="actions">
                            <button class="me-2" @onclick="(() => OpenEditDialog(department))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
                            </button>
                            <button @onclick="(() => OpenDeleteDialog(department))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-circle"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>

    }
</div>

<ModalTemplate @bind-IsVisible="ShowCreateDialog" Title="@(model.Id == 0 ? "Create" : "Edit")">
    <EditForm Model="model" class="row g-2" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="col-12 mt-0">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control"
                       @bind-Value="model.Name"
                       @oninput="@(() => ShowErrors = false)"
                       placeholder="Enter department name" />
            <ValidationMessage For="() => model.Name" />
            @if (ShowErrors)
            {
                <span class="validation-message">This department already exists.</span>
            }
        </div>
        <div class="col-12 footer">
            <button type="button" class="btn btn-light btn-sm" data-bs-dismiss="modal" @onclick="() => ShowCreateDialog = false">Cancel</button>
            <button type="submit" class="btn btn-primary btn-sm" disabled="@IsDisabled">@(model.Id == 0 ? "Create" : "Update")</button>
        </div>
    </EditForm>
</ModalTemplate>

<ConfirmDialog @bind-IsVisible="ShowDeleteDialog"
               Title="Delete"
               Text="Are you sure you want to delete this department?"
               OnClose="OnDeleteDialogClose" />

@code {
    private List<Department>? departments;
    private Department? selectedDepartment;
    private Department model = new();

    private bool ShowDeleteDialog = false;
    private bool ShowCreateDialog = false;
    private bool ShowErrors = false;
    private bool IsDisabled = false;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        departments = await Http.GetFromJsonAsync<List<Department>>("api/Departments");
    }

    private void OpenDeleteDialog(Department department)
    {
        ShowDeleteDialog = true;
        selectedDepartment = department;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool confirmed)
    {
        if (confirmed && selectedDepartment != null)
        {
            var response = await Http.DeleteAsync($"api/Departments/{selectedDepartment.Id}");
            if (response.IsSuccessStatusCode)
            {
                departments?.Remove(selectedDepartment);
            }
        }

        ShowDeleteDialog = false;
        StateHasChanged();
    }

    private void OpenCreateDialog()
    {
        selectedDepartment = null;
        model = new();
        ShowCreateDialog = true;
    }

    private void OpenEditDialog(Department department)
    {
        ShowErrors = false;
        selectedDepartment = department;
        model = new Department()
            {
                Id = department.Id,
                Name = department.Name
            };
        ShowCreateDialog = true;
    }

    private async Task HandleValidSubmit()
    {
        ShowErrors = false;
        IsDisabled = true;
        var response = model.Id == 0 ?
            await Http.PostAsJsonAsync<Department>("api/Departments", model) :
            await Http.PutAsJsonAsync<Department>($"api/Departments/{model.Id}", model);

        if (response.IsSuccessStatusCode)
        {
            var newItem = await response.Content.ReadFromJsonAsync<Department>();
            if (newItem != null)
            {
                if (model.Id == 0)
                    departments?.Add(newItem);
                else
                    departments?.Replace(selectedDepartment!, newItem);
            }

            ShowCreateDialog = false;
        }
        else
        {
            ShowErrors = true;
        }
        IsDisabled = false;
    }

    private List<Department>? GetFilteredDepartments()
    {
        return departments?
        .Where(t => t.Name!.ToLower().Contains(searchTerm.ToLower().Trim()))
        .OrderBy(t => t.Name)
        .ToList();
    }
}
