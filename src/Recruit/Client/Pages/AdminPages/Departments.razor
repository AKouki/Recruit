@page "/Admin/Departments"
@inject HttpClient Http
@attribute [Authorize]

<h3>Admin</h3>

<AdminNavMenu />

<div class="max-width-960">
    @if (departments == null || departments?.Count == 0)
    {
        <p>Loading...</p>
    }
    else
    {
        <a class="btn btn-primary btn-sm" @onclick="() => OpenEditDialog(null)">Create</a>

        <ul class="list-unstyled departments-list mt-2">
            @foreach (var department in departments ?? Enumerable.Empty<Department>())
            {
                <li class="department" @onclick="(() => OpenEditDialog(department))" @onclick:stopPropagation>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>
                            @department.Name
                        </span>
                        <div class="actions">
                            <button class="me-2" @onclick="(() => OpenEditDialog(department))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
                            </button>
                            <button @onclick="(() => OpenDeleteDialog(department))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-circle"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>

    }
</div>

<ModalTemplate @bind-IsVisible="ShowCreateDialog" Title="@(selectedDepartment == null ? "Create" : "Edit")">
    <input type="text" id="departmentName" class="form-control"
           @bind="departmentName"
           @oninput="() => ShowErrors = false"
           placeholder="Enter department name" />
    @if (ShowErrors)
    {
        <span class="form-text text-danger">This department already exists.</span>
    }
    <div class="d-flex justify-content-end align-items-center mt-2 mb-1">
        <button type="button" class="btn btn-light btn-sm me-2" data-bs-dismiss="modal" @onclick="() => ShowCreateDialog = false">Cancel</button>
        @if (selectedDepartment == null)
        {
            <button type="button" class="btn btn-primary btn-sm" @onclick="HandleCreate" disabled="@IsDisabled">Create</button>
        }
        else
        {
            <button type="button" class="btn btn-primary btn-sm" @onclick="HandleUpdate" disabled="@IsDisabled">Update</button>
        }
    </div>
</ModalTemplate>

<ConfirmDialog @bind-IsVisible="ShowDeleteDialog"
               Title="Delete"
               Text="Are you sure you want to delete this department?"
               OnClose="OnDeleteDialogClose" />

@code {
    private List<Department>? departments;
    private Department? selectedDepartment;
    private string? departmentName;

    private bool ShowDeleteDialog = false;
    private bool ShowCreateDialog = false;
    private bool ShowErrors = false;
    private bool IsDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        departments = await Http.GetFromJsonAsync<List<Department>>("api/Departments");
    }

    private void OpenDeleteDialog(Department department)
    {
        ShowDeleteDialog = true;
        selectedDepartment = department;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool confirmed)
    {
        if (confirmed && selectedDepartment != null)
        {
            var response = await Http.DeleteAsync($"api/Departments/{selectedDepartment.Id}");
            if (response.IsSuccessStatusCode)
            {
                departments?.Remove(selectedDepartment);
            }
        }

        ShowDeleteDialog = false;
        StateHasChanged();
    }

    private void OpenEditDialog(Department? department)
    {
        ShowErrors = false;
        selectedDepartment = department;
        departmentName = selectedDepartment?.Name ?? "";
        ShowCreateDialog = true;
    }

    private async Task HandleCreate()
    {
        ShowErrors = false;
        IsDisabled = true;

        var model = new Department() { Name = departmentName };
        var response = await Http.PostAsJsonAsync<Department>($"api/Departments", model);
        if (response.IsSuccessStatusCode)
        {
            var createdItem = await response.Content.ReadFromJsonAsync<Department>();
            if (createdItem != null)
                departments?.Add(createdItem);

            ShowCreateDialog = false;
        }
        else
        {
            ShowErrors = true;
        }

        selectedDepartment = null;
        IsDisabled = false;
    }

    private async Task HandleUpdate()
    {
        ShowErrors = false;
        IsDisabled = true;

        if (selectedDepartment != null)
        {
            var model = new Department() { Name = departmentName };
            var response = await Http.PutAsJsonAsync<Department>($"api/Departments/{selectedDepartment.Id}", model);
            if (response.IsSuccessStatusCode)
            {
                selectedDepartment.Name = departmentName;
                ShowCreateDialog = false;
            }
            else
            {
                ShowErrors = true;
            }
        }

        selectedDepartment = null;
        IsDisabled = false;
    }
}
