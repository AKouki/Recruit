@page "/Admin/EmailTemplates"
@inject HttpClient Http
@attribute [Authorize]

<h3>Admin</h3>

<AdminNavMenu />

<div class="max-width-960">
    @if (emailTemplates == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center">
            <div class="search-container">
                <input type="search" @oninput="OnSearchTextChange" class="form-control form-control-sm search" placeholder="Search..." />
                <div class="svg-container text-muted">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                </div>
            </div>
            <a class="btn btn-primary btn-sm" @onclick="() => OpenCreateDialog()">Create</a>
        </div>


        <ul class="list-unstyled email-templates-list mt-2">
            @foreach (var emailTemplate in filteredEmailTemplates ?? Enumerable.Empty<EmailTemplate>())
            {
                <li class="email-template" @onclick="(() => OpenEditDialog(emailTemplate))" @onclick:stopPropagation>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>
                            @emailTemplate.Name
                        </span>
                        <div class="actions">
                            <button class="me-2" @onclick="(() => OpenEditDialog(emailTemplate))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
                            </button>
                            <button @onclick="(() => OpenDeleteDialog(emailTemplate))" @onclick:stopPropagation>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-circle"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
</div>

<ModalTemplate @bind-IsVisible="ShowCreateDialog" Title="@(selectedEmailTemplate == null ? "Create" : "Edit")">
    <EditForm Model="model" class="row g-2" OnValidSubmit="HandleCreation">
        <DataAnnotationsValidator />
        <div class="col-12 mt-0">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="() => model.Name" />
        </div>
        <div class="col-12">
            <label for="subject" class="form-label">Subject</label>
            <InputText id="subject" @bind-Value="model.Subject" class="form-control" />
            <ValidationMessage For="() => model.Subject" />
        </div>
        <div class="col-12">
            <label for="body" class="form-label">Body</label>
            <InputTextArea id="body" @bind-Value="model.Body" class="form-control" rows="8" />
            <ValidationMessage For="() => model.Body" />
        </div>
        <div class="col-12 footer">
            <button type="button" class="btn btn-light btn-sm" data-bs-dismiss="modal" @onclick="() => ShowCreateDialog = false">Cancel</button>
            <button type="submit" class="btn btn-primary btn-sm" disabled="@IsDisabled">@(selectedEmailTemplate == null ? "Create" : "Edit")</button>
        </div>
    </EditForm>
</ModalTemplate>

<ConfirmDialog Title="Delete"
               Text="Are you sure you want to delete this template?"
               OnClose="OnDeleteDialogClose"
               @bind-IsVisible="ShowDeleteDialog" />

@code {
    private List<EmailTemplate>? emailTemplates;
    private List<EmailTemplate>? filteredEmailTemplates;
    private EmailTemplate? selectedEmailTemplate;

    private EmailTemplate model = new();

    private bool ShowCreateDialog = false;
    private bool ShowDeleteDialog = false;
    private bool IsDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        emailTemplates = await Http.GetFromJsonAsync<List<EmailTemplate>>("api/EmailTemplates");
        filteredEmailTemplates = emailTemplates;
    }

    private void OpenDeleteDialog(EmailTemplate emailTemplate)
    {
        ShowDeleteDialog = true;
        selectedEmailTemplate = emailTemplate;
        StateHasChanged();
    }
    
    private async Task OnDeleteDialogClose(bool confirmed)
    {
        if (confirmed && selectedEmailTemplate != null)
        {
            var response = await Http.DeleteAsync($"api/EmailTemplates/{selectedEmailTemplate.Id}");
            if (response.IsSuccessStatusCode)
            {
                emailTemplates?.Remove(selectedEmailTemplate);
            }
        }

        ShowDeleteDialog = false;
        StateHasChanged();
    }

    private void OpenCreateDialog()
    {
        selectedEmailTemplate = null;
        model = new();
        ShowCreateDialog = true;
    }

    private async Task OpenEditDialog(EmailTemplate emailTemplate)
    {
        selectedEmailTemplate = emailTemplate;
        if (emailTemplate != null)
        {
            model = await Http.GetFromJsonAsync<EmailTemplate>($"api/EmailTemplates/{emailTemplate.Id}") ?? new();
            ShowCreateDialog = true;
        }
    }

    private void OnSearchTextChange(ChangeEventArgs args)
    {
        var value = args?.Value?.ToString();
        if (!string.IsNullOrEmpty(value))
            filteredEmailTemplates = emailTemplates?.Where(t => t.Name!.ToLower().Contains(value.ToLower().Trim())).ToList();
        else
            filteredEmailTemplates = emailTemplates;
    }

    private async Task HandleCreation()
    {
        IsDisabled = true;
        var response = selectedEmailTemplate == null ?
            await Http.PostAsJsonAsync<EmailTemplate>("api/EmailTemplates", model) :
            await Http.PutAsJsonAsync<EmailTemplate>($"api/EmailTemplates/{model.Id}", model);

        if (response.IsSuccessStatusCode)
        {
            var createdItem = await response.Content.ReadFromJsonAsync<EmailTemplate>();
            if (createdItem != null)
            {
                if (selectedEmailTemplate == null)
                    emailTemplates?.Add(createdItem);
                else
                    emailTemplates?.Replace(selectedEmailTemplate, createdItem);
            }

            ShowCreateDialog = false;
        }
        IsDisabled = false;
    }
}
