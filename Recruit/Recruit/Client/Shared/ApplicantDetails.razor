@using System.Net
@inject HttpClient Http

<div class="@ShowDetailsPageCss">
    @if (Applicant != null)
    {
        <span class="close-button" @onclick="HideDetails">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>
        </span>
        <div class="section section-main">
            <div class="d-flex justify-content-between mb-3">
                <div class="d-flex">
                    @if (!string.IsNullOrEmpty(Applicant.ProfilePhoto))
                    {
                        <img src="@Applicant.ProfilePhoto" class="profile-picture me-2" />
                    }
                    <div class="d-flex flex-column">
                        <h4>@(Applicant.FirstName + " " + Applicant.LastName)</h4>
                        <h6>@Applicant.Headline</h6>
                        <span class="text-success fw-400 fs-14">
                            Applied for:
                            <NavLink href="@($"Jobs/{Applicant.Job?.Id}")">
                                @Applicant.Job?.Title
                            </NavLink>
                        </span>
                    </div>
                </div>
                <div class="d-flex align-items-start actions mt-1">
                    <div class="d-flex align-items-center">
                        <a href="mailto:@Applicant.Email?.ToLower()" class="me-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                            </svg>
                        </a>
                        <select class="form-select form-select-sm" disabled="@(ShowLoading)" value="@Applicant.Stage?.Id" @onchange="MoveToStage">
                            @foreach (var item in Stages ?? Enumerable.Empty<Stage>())
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="section section-summary">
            <h6 class="header">Summary</h6>
            @if (string.IsNullOrEmpty(Applicant.Summary))
            {
                <span class="fs-14 text-secondary">Not Provided</span>
            }
            else
            {
                <p>@Applicant.Summary</p>
            }
        </div>

        <div class="section section-contact-details">
            <h6 class="header">Contact Details</h6>
            <div>
                <table class="table">
                    <tbody>
                        <tr>
                            <td width="150">Address:</td>
                            <td>
                                @if (string.IsNullOrEmpty(Applicant.Address))
                                {
                                    <span class="fs-14 text-secondary">Not Provided</span>
                                }
                                else
                                {
                                    <span>@Applicant.Address</span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Email:</td>
                            <td>
                                <a href="@($"mailto:{Applicant.Email?.ToLower()}")">
                                    @Applicant.Email?.ToLower()
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td>Phone:</td>
                            <td>@Applicant.Phone</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="section section-education">
            <h6 class="header">Education</h6>
            @if (Applicant?.Education == null || Applicant.Education.Count == 0)
            {
                <span class="fs-14 text-secondary">Not Provided</span>
            }
            else
            {
                @foreach (var item in Applicant?.Education ?? Enumerable.Empty<Education>())
                {
                    <div class="mb-1">
                        @item.StartDate.Year - @item.EndDate.Year
                        <span class="ms-2">
                            @if (!string.IsNullOrEmpty(item.Degree))
                            {
                                <span>@item.Degree</span>
                            }
                            at <strong>@item.School</strong>
                        </span>
                    </div>
                }
            }
        </div>

        <div class="section section-experience">
            <h6 class="header">Experience</h6>
            @if (Applicant?.Experience == null || Applicant.Experience.Count == 0)
            {
                <span class="fs-14 text-secondary">Not Provided</span>
            }
            else
            {
                @foreach (var item in Applicant?.Experience ?? Enumerable.Empty<Experience>())
                {
                    <div class="mb-1">
                        @item.StartDate.Year - @item.EndDate.Year
                        <span class="ms-2">
                            @item.Title
                            @if (!string.IsNullOrEmpty(item.Company))
                            {
                                <span>at <strong>Microsoft</strong></span>
                            }
                        </span>
                    </div>
                }
            }
        </div>

        <div class="section section-skills">
            <h6 class="header">Skills</h6>
            <div>
                @if (string.IsNullOrEmpty(Applicant?.Skills))
                {
                    <span class="fs-14 text-secondary">Not Provided</span>
                }
                else
                {
                    string[] skills = Applicant.Skills.Split(",");
                    List<string> matchedSkills = new List<string>();

                    if (!string.IsNullOrEmpty(Applicant.Job?.RequiredSkills))
                    {
                        matchedSkills = Applicant.Job.RequiredSkills.Split(",").ToList();
                    }

                    foreach (var skill in skills)
                    {
                        if (matchedSkills != null && matchedSkills.Any(s => s.Trim().ToLower().Contains(skill.Trim().ToLower())))
                        {
                            <span class="badge rounded-pill skill me-1 match">@skill</span>
                        }
                        else
                        {
                            <span class="badge rounded-pill skill me-1">@skill</span>
                        }
                    }

                    <div class="d-flex align-items-center mt-2 ms-1">
                        <span class="bg-success rounded-pill skill-indicator"></span>
                        <span class="skill-indicator-description">Match with job required skills</span>
                    </div>
                }
            </div>
        </div>

        <div class="section section-resume">
            <h6 class="header">Resume</h6>
            @if (Applicant?.Resume == null)
            {
                <span class="fs-14 text-secondary">Not Provided</span>
            }
            else
            {
                <a href="#">@Applicant?.Resume?.FileName</a>
            }
        </div>
    }
</div>



@code {
    [Parameter]
    public Applicant? Applicant { get; set; }

    public List<Stage>? Stages { get; set; }

    [Parameter]
    public EventCallback<Applicant> OnStageUpdate { get; set; }

    private bool showDetailsPage => Applicant == null ? false : true;
    private string? ShowDetailsPageCss => showDetailsPage ? "applicant-details show" : "applicant-details";
    private bool ShowLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Applicant?.Job != null)
        {
            Stages = await Http.GetFromJsonAsync<List<Stage>>($"api/Stages/{Applicant.Job.Id}");
            StateHasChanged();
        }
    }

    private void HideDetails()
    {
        Applicant = null;
    }


    private async Task MoveToStage(ChangeEventArgs args)
    {
        if (Applicant != null &&
            int.TryParse(args.Value?.ToString(), out int result))
        {
            ShowLoading = true;
            var response = await Http.PostAsJsonAsync<UpdateStatusModel>("api/Applicants/UpdateStatus", new UpdateStatusModel
                {
                    ApplicantId = Applicant.Id,
                    StageId = result
                });

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Applicant.Stage = Stages?.FirstOrDefault(s => s.Id == result);
                await OnStageUpdate.InvokeAsync(Applicant);
            }
            ShowLoading = false;
        }
    }
}